include "pure_cpp.h"
include "curl.h"
windows::import "libcurl.lib"
windows::import::path "curl\\"
windows::include::path "curl\\"
unix::import "curl"
linux::include::path "/usr/include/curl/"
macosx::include::path "/usr/local/include/curl/"
linux::import::path "/usr/lib/curl/"
macosx::import::path "/usr/local/lib/curl/"
add "pure_cpp.cpp"

CHttpRequest
	public
		setUrl url
			me.url = url
			return true

		download (out)data
			result_ = true
			cpp@
				CURL* curl_handle;
				CURLcode res;

				struct MemoryStruct chunk;
				chunk.memory = (char*)malloc(1);
				chunk.size = 0;
 
				curl_global_init(CURL_GLOBAL_ALL);
				curl_handle = curl_easy_init();
 
				curl_easy_setopt(curl_handle, CURLOPT_URL, ME["url"].ToString().c_str());
				curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);
				curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);
 
				res = curl_easy_perform(curl_handle);
				if (res != CURLE_OK) 
				{
					data = "";
					result_ = false;
				}

				curl_easy_cleanup(curl_handle);
				data = (char*)chunk.memory;
				free(chunk.memory);
				curl_global_cleanup();				
			@cpp
			return result_

EntryPoint
	public
		run
			http = CHttpRequest
			http.setUrl("http://www.google.com")
			http.download(data)

			if (String.Find(data "google") > 0)
				println("Google page is loaded!")
			else
				println("Google page is NOT loaded!")

			return true

